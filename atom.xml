<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://deviljinc.github.io</id>
    <title>Coding Forever</title>
    <updated>2019-07-24T16:14:56.113Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://deviljinc.github.io"/>
    <link rel="self" href="https://deviljinc.github.io/atom.xml"/>
    <subtitle>求知的道路走了0.0001%</subtitle>
    <logo>https://deviljinc.github.io/images/avatar.png</logo>
    <icon>https://deviljinc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Coding Forever</rights>
    <entry>
        <title type="html"><![CDATA[Github Pages + Hexo搭建个人技术博客]]></title>
        <id>https://deviljinc.github.io/post/blogspace</id>
        <link href="https://deviljinc.github.io/post/blogspace">
        </link>
        <updated>2019-07-23T12:34:55.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="用github-pages-hexo搭建个人技术博客"><strong>用Github Pages + Hexo搭建个人技术博客</strong></h2>
<br/>
<h3 id="序">序</h3>
<p>Hexo安装过后，默认的主题是<a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>，如果不喜欢，我们也可以进行更换。本文主要讲解NexT主题的使用。先看下我博客网站的效果吧：<a href="https://wjingc.github.io">wjingc.github.io</a>,我使用的主题是 Mist.</p>
<h3 id="主要网站">主要网站</h3>
<ul>
<li><a href="https://github.com">Github</a></li>
<li><a href="https://hexo.io/zh-cn/">Hexo</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html">Next</a></li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h2 id="用github-pages-hexo搭建个人技术博客"><strong>用Github Pages + Hexo搭建个人技术博客</strong></h2>
<br/>
<h3 id="序">序</h3>
<p>Hexo安装过后，默认的主题是<a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>，如果不喜欢，我们也可以进行更换。本文主要讲解NexT主题的使用。先看下我博客网站的效果吧：<a href="https://wjingc.github.io">wjingc.github.io</a>,我使用的主题是 Mist.</p>
<h3 id="主要网站">主要网站</h3>
<ul>
<li><a href="https://github.com">Github</a></li>
<li><a href="https://hexo.io/zh-cn/">Hexo</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html">Next</a></li>
</ul>
<!--more-->
<h3 id="目录">目录</h3>
<h4 id="github配置">Github配置</h4>
<h5 id="注册github账号">注册Github账号</h5>
<p>打开<a href="https://github.com/">https://github.com/</a>站点，注册一个账号</p>
<h5 id="创建github仓库">创建Github仓库</h5>
<p>接下来到这个页面去创建一个新仓库<br>
<a href="https://github.com/new">https://github.com/new</a></p>
<p>这个新仓库就将是存放你即将拥有的博客的地方</p>
<p>注意，你的仓库名不能随便取，这样会导致github混乱，取名的格式应该为“<strong>用户名.github.io</strong>”</p>
<p>后面的操作照配图做就可以了</p>
<h5 id="生成github-pages">生成Github Pages</h5>
<p>建完仓库后，在当前页面右边选择Settings，进入设置页面，在这里生成你的github pages</p>
<h4 id="系统环境配置">系统环境配置</h4>
<h5 id="安装nodejs">安装Node.js</h5>
<p>参考地址：<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html">Node.js安装配置</a></p>
<h5 id="安装git">安装Git</h5>
<pre><code class="language-java">$ apt-get install git
</code></pre>
<h5 id="安装hexo">安装Hexo</h5>
<pre><code class="language-java">$ cd d:/hexo
$ npm install hexo-cli -g
$ hexo init blog
$ cd blog
$ npm install
$ hexo g # 或者hexo generate
$ hexo s # 或者hexo server，可以在http://localhost:4000/ 查看
</code></pre>
<p>这里有必要提下Hexo常用的几个命令：</p>
<ol>
<li>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li>
<li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li>
<li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）</li>
</ol>
<p>另外还有其他几个常用命令：</p>
<p>另外还有其他几个常用命令：</p>
<pre><code class="language-java">$ hexo new &quot;postName&quot; #新建文章
$ hexo new page &quot;pageName&quot; #新建页面
</code></pre>
<p>常用简写</p>
<pre><code class="language-java">$ hexo n == hexo new
$ hexo g == hexo generate
$ hexo s == hexo server
$ hexo d == hexo deploy
</code></pre>
<p>常用组合</p>
<pre><code>$ hexo d -g #生成部署
$ hexo s -g #生成预览
</code></pre>
<p>现在我们打开<a href="http://localhost:4000/">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。</p>
<h4 id="hexo主题设置">Hexo主题设置</h4>
<p>我选的是<strong>NexT</strong>主题，主题喜好根据自己选择。</p>
<p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 <code>themes</code> 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p>
<h5 id="下载主题">下载主题</h5>
<p>如果你熟悉 <a href="http://git-scm.com/">Git</a>，建议你使用克隆最新版本的方式，之后的更新可以通过 <code>git pull</code> 来快速更新， 而不用再次下载压缩包替换。</p>
<p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>Git</code> checkout 代码：</p>
<pre><code class="language-java">$ cd blog
$ git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre>
<h5 id="启用主题">启用主题</h5>
<p>与所有 Hexo 主题启用的模式一样。当克隆/下载完成后，打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>
<p>启用 NexT 主题</p>
<pre><code>theme: next
</code></pre>
<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>
<h5 id="验证主题">验证主题</h5>
<p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>
<pre><code class="language-java">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.
</code></pre>
<p>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p>
<p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p>
<h4 id="next主题配置美化">NexT主题配置美化</h4>
<h5 id="选择-scheme">选择 Scheme</h5>
<p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 <code>#</code> 去除即可。</p>
<p>选择 Mist Scheme</p>
<pre><code>#scheme: Muse
scheme: Mist
#scheme: Pisces
</code></pre>
<h5 id="设置语言">设置语言</h5>
<p>编辑 <strong>站点配置文件</strong>， 将 <code>language</code> 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>
<pre><code>language: zh-Hans
</code></pre>
<p>目前 NexT 支持的语言如以下表格所示：</p>
<table>
<thead>
<tr>
<th>语言</th>
<th>代码</th>
<th>设定示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>English</td>
<td><code>en</code></td>
<td><code>language: en</code></td>
</tr>
<tr>
<td>简体中文</td>
<td><code>zh-Hans</code></td>
<td><code>language: zh-Hans</code></td>
</tr>
<tr>
<td>Français</td>
<td><code>fr-FR</code></td>
<td><code>language: fr-FR</code></td>
</tr>
<tr>
<td>Português</td>
<td><code>pt</code></td>
<td><code>language: pt</code> or <code>language: pt-BR</code></td>
</tr>
<tr>
<td>繁體中文</td>
<td><code>zh-hk</code> 或者 <code>zh-tw</code></td>
<td><code>language: zh-hk</code></td>
</tr>
<tr>
<td>Русский язык</td>
<td><code>ru</code></td>
<td><code>language: ru</code></td>
</tr>
<tr>
<td>Deutsch</td>
<td><code>de</code></td>
<td><code>language: de</code></td>
</tr>
<tr>
<td>日本語</td>
<td><code>ja</code></td>
<td><code>language: ja</code></td>
</tr>
<tr>
<td>Indonesian</td>
<td><code>id</code></td>
<td><code>language: id</code></td>
</tr>
<tr>
<td>Korean</td>
<td><code>ko</code></td>
<td><code>language: ko</code></td>
</tr>
</tbody>
</table>
<h5 id="设置菜单">设置菜单</h5>
<p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 <a href="http://fontawesome.io/">Font Awesome</a> 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。</p>
<p>编辑 <strong><code>主题配置文件</code></strong>，修改以下内容：</p>
<ol>
<li>
<p>设定菜单内容，对应的字段是 <code>menu</code>。 菜单内容的设置格式是：<code>item name: link</code>。其中 <code>item name</code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。</p>
<p>菜单示例配置</p>
<pre><code>menu:
  home: /
  archives: /archives
  #about: /about
  #categories: /categories
  tags: /tags
  #commonweal: /404.html
</code></pre>
<p>若你的站点运行在子目录中，请将链接前缀的 <code>/</code> 去掉</p>
<p>NexT 默认的菜单项有（标注  的项表示需要手动创建这个页面）：</p>
<table>
<thead>
<tr>
<th>键值</th>
<th>设定值</th>
<th>显示文本（简体中文）</th>
</tr>
</thead>
<tbody>
<tr>
<td>home</td>
<td><code>home: /</code></td>
<td>主页</td>
</tr>
<tr>
<td>archives</td>
<td><code>archives: /archives</code></td>
<td>归档页</td>
</tr>
<tr>
<td>categories</td>
<td><code>categories: /categories</code></td>
<td>分类页</td>
</tr>
<tr>
<td>tags</td>
<td><code>tags: /tags</code></td>
<td>标签页</td>
</tr>
<tr>
<td>about</td>
<td><code>about: /about</code></td>
<td>关于页面</td>
</tr>
<tr>
<td>commonweal</td>
<td><code>commonweal: /404.html</code></td>
<td>公益 404</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 <code>languages/{language}.yml</code>（<code>{language}</code> 为你所使用的语言）。</p>
<p>以简体中文为例，若你需要添加一个菜单项，比如 <code>something</code>。那么就需要修改简体中文对应的翻译文件<code>languages/zh-Hans.yml</code>，在 <code>menu</code> 字段下添加一项：</p>
<pre><code>menu:
  home: 首页
  archives: 归档
  categories: 分类
  tags: 标签
  about: 关于
  search: 搜索
  commonweal: 公益404
  something: 有料
</code></pre>
</li>
<li>
<p>设定菜单项的图标，对应的字段是 <code>menu_icons</code>。 此设定格式是 <code>item name: icon name</code>，其中 <code>item name</code> 与上一步所配置的菜单名字对应，<code>icon name</code> 是 Font Awesome 图标的 名字。而 <code>enable</code> 可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p>
<p>菜单图标配置示例</p>
<pre><code>menu_icons:
  enable: true
  # Icon Mapping.
  home: home
  about: user
  categories: th
  tags: tags
  archives: archive
  commonweal: heartbeat
</code></pre>
<p>在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用  作为图标。</p>
<p>请注意键值（如 <code>home</code>）的大小写要严格匹配</p>
</li>
</ol>
<h5 id="设置侧栏"><strong>设置侧栏</strong></h5>
<p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p>
<ol>
<li>
<p>设置侧栏的位置，修改 <code>sidebar.position</code> 的值，支持的选项有：</p>
<ul>
<li>left - 靠左放置</li>
<li>right - 靠右放置</li>
</ul>
<p>目前仅 Pisces Scheme 支持 <code>position</code> 配置。影响版本5.0.0及更低版本。</p>
<pre><code>sidebar:
  position: left
</code></pre>
</li>
<li>
<p>设置侧栏显示的时机，修改 <code>sidebar.display</code> 的值，支持的选项有：</p>
<ul>
<li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li>
<li><code>always</code> - 在所有页面中都显示</li>
<li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li>
<li><code>remove</code> - 完全移除</li>
</ul>
<pre><code>sidebar:
  display: post
</code></pre>
<p>已知侧栏在 <code>use motion: false</code> 的情况下不会展示。 影响版本5.0.0及更低版本。</p>
</li>
</ol>
<h5 id="设置头像">设置头像</h5>
<p>编辑 主题配置文件， 修改字段 <code>avatar</code>， 值设置成头像的链接地址。其中，头像的链接地址可以是：</p>
<table>
<thead>
<tr>
<th>地址</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>完整的互联网 URI</td>
<td><code>http://example.com/avatar.png</code></td>
</tr>
<tr>
<td>站点内的地址</td>
<td>将头像放置主题目录下的 <code>source/uploads/</code> （新建 uploads 目录若不存在）  配置为：<code>avatar: /uploads/avatar.png</code>或者 放置在 <code>source/images/</code> 目录下  配置为：<code>avatar: /images/avatar.png</code></td>
</tr>
</tbody>
</table>
<p>头像设置示例</p>
<pre><code>avatar: http://example.com/avatar.png
</code></pre>
<h5 id="设置作者昵称">设置作者昵称</h5>
<p>编辑 站点配置文件， 设置 <code>author</code> 为你的昵称。</p>
<h5 id="站点描述">站点描述</h5>
<p>编辑 站点配置文件， 设置 <code>description</code> 字段为你的站点描述。站点描述可以是你喜欢的一句签名:)</p>
<p>下一步：<a href="https://wjingc.github.io/2019/03/29/NexT/"><strong>配置Hexo-NexT，使你的博客酷炫</strong></a></p>
<h5 id="参考链接"><strong>参考链接</strong></h5>
<ul>
<li><a href="https://segmentfault.com/a/1190000004947261">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html">开始使用NexT</a></li>
<li><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac 打造前端开发环境]]></title>
        <id>https://deviljinc.github.io/post/macweb</id>
        <link href="https://deviljinc.github.io/post/macweb">
        </link>
        <updated>2019-07-19T03:01:40.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="macos-mojave-打造高效率前端开发环境"><strong>macOS Mojave 打造高效率前端开发环境</strong></h2>
<h3 id="br"><br/></h3>
<h3 id="安装homebrew"><strong>安装Homebrew</strong></h3>
<br/>
<p>​	包管理工具。类似于node下的npm。可以用来安装管理大部分的无界面的工具，如node，git，Python等。<br>
​	摘自官网的安装命令：</p>
<pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="macos-mojave-打造高效率前端开发环境"><strong>macOS Mojave 打造高效率前端开发环境</strong></h2>
<h3 id="br"><br/></h3>
<h3 id="安装homebrew"><strong>安装Homebrew</strong></h3>
<br/>
<p>​	包管理工具。类似于node下的npm。可以用来安装管理大部分的无界面的工具，如node，git，Python等。<br>
​	摘自官网的安装命令：</p>
<pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
<!-- more -->
<h3 id="安装git">安装Git</h3>
<pre><code>brew install git
</code></pre>
<h3 id="安装npm">安装npm</h3>
<pre><code>npm install npm -g
</code></pre>
<h3 id="安装webpack">安装webpack</h3>
<pre><code>npm install webpack -g
</code></pre>
<h3 id="用-iterm2-代替mac-terminal">**用 iTerm2 代替Mac Terminal **</h3>
<p>​	Mac原生terminal 也很强大也可以设置很美观，但是iTerm2 明显更优秀。</p>
<h4 id="安装">安装</h4>
<p>​	首先我们下载的 iTem2 这个软件，比Mac自带的终端更加强大。直接官网 <a href="http://iterm2.com/">http://iterm2.com/</a> 下载并安装即可。</p>
<h4 id="配置">配置</h4>
<p>​	将iTem2设置为默认终端：（菜单栏）iTerm2 -&gt; Make iTerm2 Default Term</p>
<p>​						![屏幕快照 2019-05-09 下午4.16.20](/Users/evildevil/Pictures/Screen Shot/屏幕快照 2019-05-09 下午4.16.20.png)</p>
<p>​	然后打开偏好设置preference，选中Keys，勾选Hotkey下的Show/hide iTerm2 with a system-wide hotkey，我将热键设置为 Option + Space，这样你就可以通过Option + Space . 全局热键来打开或关闭iTerm2窗口，非常方便。</p>
<h4 id="主题配色">主题配色</h4>
<p>​	首先我来介绍一下如何下载并应用我们看好的主题配置文件。</p>
<p>​	我们可以点击 <a href="https://github.com/mbadolato/iTerm2-Color-Schemes/archive/master.zip">这个链接</a> 直接下载主题项目的所有文件，得到压缩包，解压即可。使用 <code>git</code> 版本控制系统的同学也可以通过下面这个命令将 GitHub 仓库整个克隆至本地：</p>
<pre><code>git clone https://github.com/mbadolato/iTerm2-Color-Schemes.git

</code></pre>
<p>​	我个人推荐One Dark 主题。One 系列主题同样也有一暗一亮两个配色方案。<strong>其中的 One Dark 是 Atom 编辑器的默认主题配色</strong>，简洁、养眼。不得不承认这一主题确实很符合我的胃口，我现在所有可以配色的地方（比如各种终端和 VS Code 等编辑器）几乎就直接使用 One Dark 配色。</p>
<p><img src="https://cdn.sspai.com/2019/02/22/7cadc29a9e9ef2df38cff8d74c8b2f2e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p>
<p>​	这是我的iTerm2界面，自认为很简洁美观。</p>
<p>![屏幕快照 2019-05-09 下午4.23.47](/Users/evildevil/Pictures/Screen Shot/屏幕快照 2019-05-09 下午4.23.47.png)</p>
<p>推荐链接：<a href="https://sspai.com/post/53008">10 个 Terminal 主题，让你的 macOS 终端更好看</a></p>
<h4 id="安装oh-my-zsh">安装oh-my-zsh</h4>
<p>​	github连接：<a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a></p>
<p>​	使用 crul 安装：</p>
<pre><code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;
</code></pre>
<p>​	或使用wget：</p>
<pre><code>`sh -c ``&quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;`
</code></pre>
<h3 id="编辑器"><strong>编辑器</strong></h3>
<h4 id="vusual-studio-code">Vusual Studio Code</h4>
<p>​	<strong>Visual Studio Code</strong> is a <strong>lightweight but powerful source code editor</strong> which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for <code>JavaScript, TypeScript and Node.js</code> and has <code>a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity)</code>.<br>
支持的拓展常见的包含如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3980862-5825acffe2b3a3f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/793/format/webp" alt="img"></p>
<h5 id="优点">优点：</h5>
<p>​	重新定义了 Code 编辑。</p>
<p>​	在任何操作系统上编辑和调试应用程序</p>
<p>​	内置 Git 支持 ，1000 种以上的扩展</p>
<p>​	免费和开源</p>
<h5 id="官网vusual-studio-code">官网：<a href="https://code.visualstudio.com/">Vusual Studio Code</a></h5>
<h5 id="下载安装downloads">下载安装；<a href="https://code.visualstudio.com/Download">Downloads</a></h5>
<h5 id="官方文档vs-code-docs">官方文档：<a href="https://code.visualstudio.com/docs">VS Code Docs</a></h5>
<h5 id="扩展官网extensions-marketplace">扩展官网：<a href="https://marketplace.visualstudio.com/VSCode">Extensions Marketplace</a></h5>
<h5 id="推荐扩展">推荐扩展</h5>
<p>​	我将单独写一篇博文具体介绍一些实用的开发插件。</p>
<h4 id="webstorm">WebStorm</h4>
<p>​	WebStorm 是<a href="https://baike.baidu.com/item/jetbrains">jetbrains</a>公司旗下一款JavaScript 开发工具。目前已经被广大中国JS开发者誉为“Web前端开发神器”、“最强大的HTML5编辑器”、“最智能的JavaScript IDE”等。与[IntelliJ IDEA](https://baike.baidu.com/item/IntelliJ IDEA)同源，继承了IntelliJ IDEA强大的JS部分的功能。</p>
<h4 id="submlie-text3">Submlie Text3</h4>
<h5 id="下载安装官网">下载安装：<a href="http://www.sublimetext.com/3">官网</a></h5>
<h5 id="插件推荐">插件推荐：</h5>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[愿望单]]></title>
        <id>https://deviljinc.github.io/post/yuan-wang-dan</id>
        <link href="https://deviljinc.github.io/post/yuan-wang-dan">
        </link>
        <updated>2019-07-03T14:51:52.000Z</updated>
        <summary type="html"><![CDATA[<p>SONY<br>
Macbook Pro</p>
]]></summary>
        <content type="html"><![CDATA[<p>SONY<br>
Macbook Pro</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[...]]></title>
        <id>https://deviljinc.github.io/post/</id>
        <link href="https://deviljinc.github.io/post/">
        </link>
        <updated>2019-07-01T14:21:11.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="哈哈哈哈哈">哈哈哈哈哈</h4>
]]></summary>
        <content type="html"><![CDATA[<h4 id="哈哈哈哈哈">哈哈哈哈哈</h4>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web]]></title>
        <id>https://deviljinc.github.io/post/web</id>
        <link href="https://deviljinc.github.io/post/web">
        </link>
        <updated>2019-06-29T12:14:37.000Z</updated>
        <content type="html"><![CDATA[<h4 id="life-is-struggle">Life is struggle</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dargon]]></title>
        <id>https://deviljinc.github.io/post/dargon</id>
        <link href="https://deviljinc.github.io/post/dargon">
        </link>
        <updated>2019-06-27T15:03:38.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="凡王之血必已剑终">凡王之血，必已剑终。</h4>
]]></summary>
        <content type="html"><![CDATA[<h4 id="凡王之血必已剑终">凡王之血，必已剑终。</h4>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[屠龙少年]]></title>
        <id>https://deviljinc.github.io/post/tu-long-shao-nian</id>
        <link href="https://deviljinc.github.io/post/tu-long-shao-nian">
        </link>
        <updated>2019-06-26T14:26:54.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="愿你出走半生">愿你出走半生</h4>
<h4 id="归来仍是少年">归来仍是少年</h4>
]]></summary>
        <content type="html"><![CDATA[<h4 id="愿你出走半生">愿你出走半生</h4>
<h4 id="归来仍是少年">归来仍是少年</h4>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[First Doc]]></title>
        <id>https://deviljinc.github.io/post/first-doc</id>
        <link href="https://deviljinc.github.io/post/first-doc">
        </link>
        <updated>2019-06-25T15:06:54.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="coffee">Coffee</h4>
<h4 id="java">Java</h4>
]]></summary>
        <content type="html"><![CDATA[<h4 id="coffee">Coffee</h4>
<h4 id="java">Java</h4>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[First Vue]]></title>
        <id>https://deviljinc.github.io/post/first-vue</id>
        <link href="https://deviljinc.github.io/post/first-vue">
        </link>
        <updated>2019-06-23T13:57:39.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="黑日">黑日</h4>
]]></summary>
        <content type="html"><![CDATA[<h4 id="黑日">黑日</h4>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[First web]]></title>
        <id>https://deviljinc.github.io/post/first-web</id>
        <link href="https://deviljinc.github.io/post/first-web">
        </link>
        <updated>2019-06-22T13:56:50.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="hello-web">Hello Web</h3>
]]></summary>
        <content type="html"><![CDATA[<h3 id="hello-web">Hello Web</h3>
<!-- more -->
]]></content>
    </entry>
</feed>